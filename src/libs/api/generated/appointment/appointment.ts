/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Vaghtban API
 * API for managing reservations
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Appointment,
  AppointmentsGetAllParams,
  CreateAppointmentDto
} from '.././models';

import { apiClientFactory } from '../../factories/apiClientFactory';




export const appointmentsCreate = (
    createAppointmentDto: CreateAppointmentDto,
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<void>(
      {url: `/appointments`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createAppointmentDto, signal
    },
      );
    }
  


export const getAppointmentsCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof appointmentsCreate>>, TError,{data: CreateAppointmentDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof appointmentsCreate>>, TError,{data: CreateAppointmentDto}, TContext> => {

const mutationKey = ['appointmentsCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof appointmentsCreate>>, {data: CreateAppointmentDto}> = (props) => {
          const {data} = props ?? {};

          return  appointmentsCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AppointmentsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof appointmentsCreate>>>
    export type AppointmentsCreateMutationBody = CreateAppointmentDto
    export type AppointmentsCreateMutationError = unknown

    export const useAppointmentsCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof appointmentsCreate>>, TError,{data: CreateAppointmentDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof appointmentsCreate>>,
        TError,
        {data: CreateAppointmentDto},
        TContext
      > => {

      const mutationOptions = getAppointmentsCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const appointmentsGetAll = (
    params?: AppointmentsGetAllParams,
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<Appointment[]>(
      {url: `/appointments`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getAppointmentsGetAllQueryKey = (params?: AppointmentsGetAllParams,) => {
    return [`/appointments`, ...(params ? [params]: [])] as const;
    }

    
export const getAppointmentsGetAllQueryOptions = <TData = Awaited<ReturnType<typeof appointmentsGetAll>>, TError = unknown>(params?: AppointmentsGetAllParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof appointmentsGetAll>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAppointmentsGetAllQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof appointmentsGetAll>>> = ({ signal }) => appointmentsGetAll(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof appointmentsGetAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AppointmentsGetAllQueryResult = NonNullable<Awaited<ReturnType<typeof appointmentsGetAll>>>
export type AppointmentsGetAllQueryError = unknown


export function useAppointmentsGetAll<TData = Awaited<ReturnType<typeof appointmentsGetAll>>, TError = unknown>(
 params: undefined |  AppointmentsGetAllParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof appointmentsGetAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof appointmentsGetAll>>,
          TError,
          Awaited<ReturnType<typeof appointmentsGetAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAppointmentsGetAll<TData = Awaited<ReturnType<typeof appointmentsGetAll>>, TError = unknown>(
 params?: AppointmentsGetAllParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof appointmentsGetAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof appointmentsGetAll>>,
          TError,
          Awaited<ReturnType<typeof appointmentsGetAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAppointmentsGetAll<TData = Awaited<ReturnType<typeof appointmentsGetAll>>, TError = unknown>(
 params?: AppointmentsGetAllParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof appointmentsGetAll>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useAppointmentsGetAll<TData = Awaited<ReturnType<typeof appointmentsGetAll>>, TError = unknown>(
 params?: AppointmentsGetAllParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof appointmentsGetAll>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAppointmentsGetAllQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const lala = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<void>(
      {url: `/appointments/lala`, method: 'GET', signal
    },
      );
    }
  

export const getLalaQueryKey = () => {
    return [`/appointments/lala`] as const;
    }

    
export const getLalaQueryOptions = <TData = Awaited<ReturnType<typeof lala>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof lala>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLalaQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof lala>>> = ({ signal }) => lala(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof lala>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type LalaQueryResult = NonNullable<Awaited<ReturnType<typeof lala>>>
export type LalaQueryError = unknown


export function useLala<TData = Awaited<ReturnType<typeof lala>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof lala>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof lala>>,
          TError,
          Awaited<ReturnType<typeof lala>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useLala<TData = Awaited<ReturnType<typeof lala>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof lala>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof lala>>,
          TError,
          Awaited<ReturnType<typeof lala>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useLala<TData = Awaited<ReturnType<typeof lala>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof lala>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useLala<TData = Awaited<ReturnType<typeof lala>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof lala>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getLalaQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



