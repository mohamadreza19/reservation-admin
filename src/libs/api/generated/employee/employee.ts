/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Vaghtban API
 * API for managing reservations
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  UpdateEmployeeDto
} from '.././models';

import { apiClientFactory } from '../../factories/apiClientFactory';




/**
 * @summary Update an employee
 */
export const update = (
    id: string,
    updateEmployeeDto: UpdateEmployeeDto,
 ) => {
      
      
      return apiClientFactory<void>(
      {url: `/employee/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateEmployeeDto
    },
      );
    }
  


export const getUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof update>>, TError,{id: string;data: UpdateEmployeeDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof update>>, TError,{id: string;data: UpdateEmployeeDto}, TContext> => {

const mutationKey = ['update'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof update>>, {id: string;data: UpdateEmployeeDto}> = (props) => {
          const {id,data} = props ?? {};

          return  update(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateMutationResult = NonNullable<Awaited<ReturnType<typeof update>>>
    export type UpdateMutationBody = UpdateEmployeeDto
    export type UpdateMutationError = unknown

    /**
 * @summary Update an employee
 */
export const useUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof update>>, TError,{id: string;data: UpdateEmployeeDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof update>>,
        TError,
        {id: string;data: UpdateEmployeeDto},
        TContext
      > => {

      const mutationOptions = getUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get all employees for a specific business
 */
export const findAllForBusiness = (
    businessId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<void>(
      {url: `/employee/business/${businessId}`, method: 'GET', signal
    },
      );
    }
  

export const getFindAllForBusinessQueryKey = (businessId: string,) => {
    return [`/employee/business/${businessId}`] as const;
    }

    
export const getFindAllForBusinessInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof findAllForBusiness>>>, TError = unknown>(businessId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllForBusinessQueryKey(businessId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllForBusiness>>> = ({ signal }) => findAllForBusiness(businessId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(businessId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllForBusinessInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findAllForBusiness>>>
export type FindAllForBusinessInfiniteQueryError = unknown


export function useFindAllForBusinessInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllForBusiness>>>, TError = unknown>(
 businessId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllForBusiness>>,
          TError,
          Awaited<ReturnType<typeof findAllForBusiness>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllForBusinessInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllForBusiness>>>, TError = unknown>(
 businessId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllForBusiness>>,
          TError,
          Awaited<ReturnType<typeof findAllForBusiness>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllForBusinessInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllForBusiness>>>, TError = unknown>(
 businessId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all employees for a specific business
 */

export function useFindAllForBusinessInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllForBusiness>>>, TError = unknown>(
 businessId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindAllForBusinessInfiniteQueryOptions(businessId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindAllForBusinessQueryOptions = <TData = Awaited<ReturnType<typeof findAllForBusiness>>, TError = unknown>(businessId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllForBusinessQueryKey(businessId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllForBusiness>>> = ({ signal }) => findAllForBusiness(businessId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(businessId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllForBusinessQueryResult = NonNullable<Awaited<ReturnType<typeof findAllForBusiness>>>
export type FindAllForBusinessQueryError = unknown


export function useFindAllForBusiness<TData = Awaited<ReturnType<typeof findAllForBusiness>>, TError = unknown>(
 businessId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllForBusiness>>,
          TError,
          Awaited<ReturnType<typeof findAllForBusiness>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllForBusiness<TData = Awaited<ReturnType<typeof findAllForBusiness>>, TError = unknown>(
 businessId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllForBusiness>>,
          TError,
          Awaited<ReturnType<typeof findAllForBusiness>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllForBusiness<TData = Awaited<ReturnType<typeof findAllForBusiness>>, TError = unknown>(
 businessId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all employees for a specific business
 */

export function useFindAllForBusiness<TData = Awaited<ReturnType<typeof findAllForBusiness>>, TError = unknown>(
 businessId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllForBusiness>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindAllForBusinessQueryOptions(businessId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



