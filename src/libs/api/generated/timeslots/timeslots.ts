/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Vaghtban API
 * API for managing reservations
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AvailableDateRangeDto,
  GetAvailableDateRangeParams,
  GetStatusResDto,
  GetTimeslotsByDateParams,
  TimeslotByDateDto
} from '.././models';

import { apiClientFactory } from '../../factories/apiClientFactory';




export const getAvailableDateRange = (
    params: GetAvailableDateRangeParams,
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<AvailableDateRangeDto[]>(
      {url: `/timeslots/available-range`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAvailableDateRangeQueryKey = (params: GetAvailableDateRangeParams,) => {
    return [`/timeslots/available-range`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAvailableDateRangeQueryOptions = <TData = Awaited<ReturnType<typeof getAvailableDateRange>>, TError = unknown>(params: GetAvailableDateRangeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableDateRange>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAvailableDateRangeQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAvailableDateRange>>> = ({ signal }) => getAvailableDateRange(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAvailableDateRange>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAvailableDateRangeQueryResult = NonNullable<Awaited<ReturnType<typeof getAvailableDateRange>>>
export type GetAvailableDateRangeQueryError = unknown


export function useGetAvailableDateRange<TData = Awaited<ReturnType<typeof getAvailableDateRange>>, TError = unknown>(
 params: GetAvailableDateRangeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableDateRange>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableDateRange>>,
          TError,
          Awaited<ReturnType<typeof getAvailableDateRange>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAvailableDateRange<TData = Awaited<ReturnType<typeof getAvailableDateRange>>, TError = unknown>(
 params: GetAvailableDateRangeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableDateRange>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableDateRange>>,
          TError,
          Awaited<ReturnType<typeof getAvailableDateRange>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAvailableDateRange<TData = Awaited<ReturnType<typeof getAvailableDateRange>>, TError = unknown>(
 params: GetAvailableDateRangeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableDateRange>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAvailableDateRange<TData = Awaited<ReturnType<typeof getAvailableDateRange>>, TError = unknown>(
 params: GetAvailableDateRangeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableDateRange>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAvailableDateRangeQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const timeslotsCreate = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<void>(
      {url: `/timeslots`, method: 'POST', signal
    },
      );
    }
  


export const getTimeslotsCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof timeslotsCreate>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof timeslotsCreate>>, TError,void, TContext> => {

const mutationKey = ['timeslotsCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof timeslotsCreate>>, void> = () => {
          

          return  timeslotsCreate()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TimeslotsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof timeslotsCreate>>>
    
    export type TimeslotsCreateMutationError = unknown

    export const useTimeslotsCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof timeslotsCreate>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof timeslotsCreate>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getTimeslotsCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getTimeslotsByDate = (
    params: GetTimeslotsByDateParams,
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<TimeslotByDateDto[]>(
      {url: `/timeslots/by-date`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetTimeslotsByDateQueryKey = (params: GetTimeslotsByDateParams,) => {
    return [`/timeslots/by-date`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTimeslotsByDateQueryOptions = <TData = Awaited<ReturnType<typeof getTimeslotsByDate>>, TError = void>(params: GetTimeslotsByDateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTimeslotsByDate>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTimeslotsByDateQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTimeslotsByDate>>> = ({ signal }) => getTimeslotsByDate(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTimeslotsByDate>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTimeslotsByDateQueryResult = NonNullable<Awaited<ReturnType<typeof getTimeslotsByDate>>>
export type GetTimeslotsByDateQueryError = void


export function useGetTimeslotsByDate<TData = Awaited<ReturnType<typeof getTimeslotsByDate>>, TError = void>(
 params: GetTimeslotsByDateParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTimeslotsByDate>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTimeslotsByDate>>,
          TError,
          Awaited<ReturnType<typeof getTimeslotsByDate>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTimeslotsByDate<TData = Awaited<ReturnType<typeof getTimeslotsByDate>>, TError = void>(
 params: GetTimeslotsByDateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTimeslotsByDate>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTimeslotsByDate>>,
          TError,
          Awaited<ReturnType<typeof getTimeslotsByDate>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTimeslotsByDate<TData = Awaited<ReturnType<typeof getTimeslotsByDate>>, TError = void>(
 params: GetTimeslotsByDateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTimeslotsByDate>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetTimeslotsByDate<TData = Awaited<ReturnType<typeof getTimeslotsByDate>>, TError = void>(
 params: GetTimeslotsByDateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTimeslotsByDate>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTimeslotsByDateQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const timeslotsStatus = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<GetStatusResDto>(
      {url: `/timeslots/status`, method: 'GET', signal
    },
      );
    }
  

export const getTimeslotsStatusQueryKey = () => {
    return [`/timeslots/status`] as const;
    }

    
export const getTimeslotsStatusQueryOptions = <TData = Awaited<ReturnType<typeof timeslotsStatus>>, TError = GetStatusResDto>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timeslotsStatus>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTimeslotsStatusQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof timeslotsStatus>>> = ({ signal }) => timeslotsStatus(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof timeslotsStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TimeslotsStatusQueryResult = NonNullable<Awaited<ReturnType<typeof timeslotsStatus>>>
export type TimeslotsStatusQueryError = GetStatusResDto


export function useTimeslotsStatus<TData = Awaited<ReturnType<typeof timeslotsStatus>>, TError = GetStatusResDto>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof timeslotsStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof timeslotsStatus>>,
          TError,
          Awaited<ReturnType<typeof timeslotsStatus>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTimeslotsStatus<TData = Awaited<ReturnType<typeof timeslotsStatus>>, TError = GetStatusResDto>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timeslotsStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof timeslotsStatus>>,
          TError,
          Awaited<ReturnType<typeof timeslotsStatus>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTimeslotsStatus<TData = Awaited<ReturnType<typeof timeslotsStatus>>, TError = GetStatusResDto>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timeslotsStatus>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useTimeslotsStatus<TData = Awaited<ReturnType<typeof timeslotsStatus>>, TError = GetStatusResDto>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timeslotsStatus>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTimeslotsStatusQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



