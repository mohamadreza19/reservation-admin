/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Vaghtban API
 * API for managing reservations
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  LoginDto,
  OtpRequestDto,
  VerifyOtpDto,
  VerifyOtpResponseDto
} from '.././models';

import { apiClientFactory } from '../../factories/apiClientFactory';




export const sendOTP = (
    otpRequestDto: OtpRequestDto,
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<void>(
      {url: `/auth/send-otp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: otpRequestDto, signal
    },
      );
    }
  


export const getSendOTPMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendOTP>>, TError,{data: OtpRequestDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof sendOTP>>, TError,{data: OtpRequestDto}, TContext> => {

const mutationKey = ['sendOTP'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sendOTP>>, {data: OtpRequestDto}> = (props) => {
          const {data} = props ?? {};

          return  sendOTP(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SendOTPMutationResult = NonNullable<Awaited<ReturnType<typeof sendOTP>>>
    export type SendOTPMutationBody = OtpRequestDto
    export type SendOTPMutationError = unknown

    export const useSendOTP = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendOTP>>, TError,{data: OtpRequestDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof sendOTP>>,
        TError,
        {data: OtpRequestDto},
        TContext
      > => {

      const mutationOptions = getSendOTPMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const verifyOTP = (
    verifyOtpDto: VerifyOtpDto,
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<VerifyOtpResponseDto>(
      {url: `/auth/verify-otp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: verifyOtpDto, signal
    },
      );
    }
  


export const getVerifyOTPMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyOTP>>, TError,{data: VerifyOtpDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof verifyOTP>>, TError,{data: VerifyOtpDto}, TContext> => {

const mutationKey = ['verifyOTP'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof verifyOTP>>, {data: VerifyOtpDto}> = (props) => {
          const {data} = props ?? {};

          return  verifyOTP(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type VerifyOTPMutationResult = NonNullable<Awaited<ReturnType<typeof verifyOTP>>>
    export type VerifyOTPMutationBody = VerifyOtpDto
    export type VerifyOTPMutationError = unknown

    export const useVerifyOTP = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyOTP>>, TError,{data: VerifyOtpDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof verifyOTP>>,
        TError,
        {data: VerifyOtpDto},
        TContext
      > => {

      const mutationOptions = getVerifyOTPMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const adminLogin = (
    loginDto: LoginDto,
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<VerifyOtpResponseDto>(
      {url: `/auth/admin-login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginDto, signal
    },
      );
    }
  


export const getAdminLoginMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adminLogin>>, TError,{data: LoginDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof adminLogin>>, TError,{data: LoginDto}, TContext> => {

const mutationKey = ['adminLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof adminLogin>>, {data: LoginDto}> = (props) => {
          const {data} = props ?? {};

          return  adminLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AdminLoginMutationResult = NonNullable<Awaited<ReturnType<typeof adminLogin>>>
    export type AdminLoginMutationBody = LoginDto
    export type AdminLoginMutationError = unknown

    export const useAdminLogin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adminLogin>>, TError,{data: LoginDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof adminLogin>>,
        TError,
        {data: LoginDto},
        TContext
      > => {

      const mutationOptions = getAdminLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    