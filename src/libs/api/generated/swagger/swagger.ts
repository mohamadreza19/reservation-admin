/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Vaghtban API
 * API for managing reservations
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetSwaggerJson200
} from '.././models';

import { apiClientFactory } from '../../factories/apiClientFactory';




/**
 * Returns the OpenAPI specification for the Vaghtban API as a JSON file.
 * @summary Download the OpenAPI (Swagger) JSON specification
 */
export const getSwaggerJson = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClientFactory<GetSwaggerJson200>(
      {url: `/swagger-json`, method: 'GET', signal
    },
      );
    }
  

export const getGetSwaggerJsonQueryKey = () => {
    return [`/swagger-json`] as const;
    }

    
export const getGetSwaggerJsonQueryOptions = <TData = Awaited<ReturnType<typeof getSwaggerJson>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSwaggerJson>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSwaggerJsonQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSwaggerJson>>> = ({ signal }) => getSwaggerJson(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSwaggerJson>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSwaggerJsonQueryResult = NonNullable<Awaited<ReturnType<typeof getSwaggerJson>>>
export type GetSwaggerJsonQueryError = unknown


export function useGetSwaggerJson<TData = Awaited<ReturnType<typeof getSwaggerJson>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSwaggerJson>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSwaggerJson>>,
          TError,
          Awaited<ReturnType<typeof getSwaggerJson>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSwaggerJson<TData = Awaited<ReturnType<typeof getSwaggerJson>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSwaggerJson>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSwaggerJson>>,
          TError,
          Awaited<ReturnType<typeof getSwaggerJson>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSwaggerJson<TData = Awaited<ReturnType<typeof getSwaggerJson>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSwaggerJson>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Download the OpenAPI (Swagger) JSON specification
 */

export function useGetSwaggerJson<TData = Awaited<ReturnType<typeof getSwaggerJson>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSwaggerJson>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSwaggerJsonQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



